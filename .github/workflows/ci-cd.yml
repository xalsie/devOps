name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ghcr.io/xalsie/devops/backend
  IMAGE_NAME_FRONTEND: ghcr.io/xalsie/devops/frontend
  TF_VERSION: "1.6.0"
  ANSIBLE_VERSION: "8.0.0"

jobs:
  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run lint
      run: npm run lint || echo "Lint script not found, skipping..."
      
    - name: Run tests
      run: npm test

  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run lint
      run: npm run lint || echo "Lint script not found, skipping..."
      
    - name: Run build
      run: npm run build
      
    - name: Run validate
      run: npm run validate

  terraform-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infrastructure
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v4
      with:
        tflint_version: v0.50.0
        
    - name: Setup Checkov
      run: |
        pip install checkov
        checkov --version
        
    - name: Terraform Format
      run: terraform fmt -recursive

    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      
    - name: Terraform Init
      run: terraform init -backend=false
      
    - name: Terraform Validate
      run: terraform validate
      
    - name: TFLint
      run: |
        tflint --init
        tflint --format compact
        
    - name: Checkov Security Scan
      run: |
        checkov -d . --framework terraform \
          --output cli \
          --quiet \
          --compact \
          --skip-check CKV_AWS_79,CKV_AWS_23 # Skip some checks if needed

  generate-config:
    needs: [backend-test, frontend-test, terraform-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Verify Terraform outputs exist
      run: |
        if [ ! -f "infrastructure/outputs.json" ]; then
          echo "❌ Fichier infrastructure/outputs.json manquant"
          echo "💡 Pour générer ce fichier, lancez d'abord:"
          echo "   cd infrastructure && terraform apply && ./generate-outputs.sh"
          exit 1
        fi
        echo "✅ Fichier outputs.json trouvé - génération des configurations"

    - name: Generate configuration from Terraform outputs
      run: |
        echo "🔄 Génération des configurations depuis les outputs Terraform..."
        
        # Vérifier que jq est disponible
        if ! command -v jq &> /dev/null; then
          echo "❌ jq n'est pas installé"
          exit 1
        fi
        
        # Extraire les valeurs des outputs
        BACKEND_PUBLIC_IP=$(jq -r '.backend_public_ip.value' infrastructure/outputs.json)
        FRONTEND_PUBLIC_IP=$(jq -r '.frontend_public_ip.value' infrastructure/outputs.json)
        MONGODB_PUBLIC_IP=$(jq -r '.mongodb_public_ip.value' infrastructure/outputs.json)
        BACKEND_PRIVATE_IP=$(jq -r '.backend_private_ip.value' infrastructure/outputs.json)
        FRONTEND_PRIVATE_IP=$(jq -r '.frontend_private_ip.value' infrastructure/outputs.json)
        MONGODB_PRIVATE_IP=$(jq -r '.mongodb_private_ip.value' infrastructure/outputs.json)
        
        echo "📋 IPs extraites des outputs:"
        echo "   Backend Public:  $BACKEND_PUBLIC_IP"
        echo "   Frontend Public: $FRONTEND_PUBLIC_IP"
        echo "   MongoDB Public:  $MONGODB_PUBLIC_IP"
        
        # Générer le fichier .env pour le frontend
        cat > frontend/.env << EOF
        # Configuration générée depuis les outputs Terraform réels
        VITE_BACKEND_URL=http://$BACKEND_PUBLIC_IP:3000
        EOF
        
        # Générer le fichier inventory.ini pour Ansible
        cat > ansible/inventory.ini << EOF
        [mongodb]
        $MONGODB_PUBLIC_IP ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/aws-devops.pem

        [backend]
        $BACKEND_PUBLIC_IP ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/aws-devops.pem

        [frontend]
        $FRONTEND_PUBLIC_IP ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/aws-devops.pem

        [all:vars]
        ansible_ssh_common_args='-o StrictHostKeyChecking=no'
        mongodb_private_ip=$MONGODB_PRIVATE_IP
        backend_private_ip=$BACKEND_PRIVATE_IP
        frontend_private_ip=$FRONTEND_PRIVATE_IP
        backend_public_ip=$BACKEND_PUBLIC_IP
        frontend_public_ip=$FRONTEND_PUBLIC_IP
        EOF
        
        echo "✅ Configurations générées avec les vraies valeurs Terraform"

    - name: Upload generated configs as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: generated-configs
        path: |
          frontend/.env
          ansible/inventory.ini
        retention-days: 30

  docker-build-push:
    needs: [backend-test, frontend-test, terraform-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for Terraform outputs
      id: check-outputs
      run: |
        if [ -f "infrastructure/outputs.json" ]; then
          echo "outputs_exist=true" >> $GITHUB_OUTPUT
          echo "✅ Fichier outputs.json trouvé - utilisation des vraies valeurs"
        else
          echo "outputs_exist=false" >> $GITHUB_OUTPUT
          echo "⚠️  Aucun outputs.json trouvé - génération de valeurs simulées"
        fi
        
    - name: Generate configuration from real outputs
      if: steps.check-outputs.outputs.outputs_exist == 'true'
      run: |
        echo "🔄 Génération des configurations depuis les outputs Terraform réels..."
        
        # Extraire les valeurs des outputs
        BACKEND_PUBLIC_IP=$(jq -r '.backend_public_ip.value' infrastructure/outputs.json)
        FRONTEND_PUBLIC_IP=$(jq -r '.frontend_public_ip.value' infrastructure/outputs.json)
        MONGODB_PUBLIC_IP=$(jq -r '.mongodb_public_ip.value' infrastructure/outputs.json)
        BACKEND_PRIVATE_IP=$(jq -r '.backend_private_ip.value' infrastructure/outputs.json)
        FRONTEND_PRIVATE_IP=$(jq -r '.frontend_private_ip.value' infrastructure/outputs.json)
        MONGODB_PRIVATE_IP=$(jq -r '.mongodb_private_ip.value' infrastructure/outputs.json)
        
        # Générer le fichier .env pour le frontend
        cat > frontend/.env << EOF
        # Configuration générée depuis les outputs Terraform réels
        VITE_BACKEND_URL=http://$BACKEND_PUBLIC_IP:3000
        EOF
        
        # Générer le fichier inventory.ini pour Ansible
        cat > ansible/inventory.ini << EOF
        [mongodb]
        $MONGODB_PUBLIC_IP ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/aws-devops.pem

        [backend]
        $BACKEND_PUBLIC_IP ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/aws-devops.pem

        [frontend]
        $FRONTEND_PUBLIC_IP ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/aws-devops.pem

        [all:vars]
        ansible_ssh_common_args='-o StrictHostKeyChecking=no'
        mongodb_private_ip=$MONGODB_PRIVATE_IP
        backend_private_ip=$BACKEND_PRIVATE_IP
        frontend_private_ip=$FRONTEND_PRIVATE_IP
        backend_public_ip=$BACKEND_PUBLIC_IP
        frontend_public_ip=$FRONTEND_PUBLIC_IP
        EOF
        
        echo "✅ Configurations générées avec les vraies valeurs"

    - name: Upload generated configs as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: generated-configs
        path: |
          frontend/.env
          ansible/inventory.ini
        retention-days: 30

  docker-build-push:
    needs: [generate-config]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download generated configs
      uses: actions/download-artifact@v4
      with:
        name: generated-configs
        path: .
        
    - name: Verify configurations
      run: |
        echo "📋 Vérification des fichiers de configuration..."
        if [ -f "frontend/.env" ]; then
          echo "✅ frontend/.env trouvé:"
          cat frontend/.env
        else
          echo "❌ frontend/.env manquant"
        fi
        
        if [ -f "ansible/inventory.ini" ]; then
          echo "✅ ansible/inventory.ini trouvé:"
          head -10 ansible/inventory.ini
        else
          echo "❌ ansible/inventory.ini manquant"
        fi
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.CR_PAT }}
        
    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build frontend assets
      run: |
        cd frontend
        npm ci
        npm run build
        
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Validation de l'infrastructure (sans déploiement)
  terraform-validate:
    needs: [docker-build-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    defaults:
      run:
        working-directory: ./infrastructure
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'eu-west-3' }}
        
    - name: Terraform Init
      run: terraform init
      
    - name: Terraform Plan
      run: |
        terraform plan -var-file="terraform.tfvars" -out=tfplan
        terraform show -no-color tfplan

    - name: Validation Complete
      run: |
        echo "✅ Validation Terraform terminée avec succès"
        echo "📋 Plan vérifié - aucune infrastructure créée"
        echo "💡 Pour déployer, lancez manuellement: terraform apply"

  # Validation de la configuration Ansible avec les vraies valeurs
  ansible-validate:
    needs: [terraform-validate]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download generated configs from docker-build-push job
      uses: actions/download-artifact@v4
      with:
        name: generated-configs
        path: .
        
    - name: Setup Python and Ansible
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Ansible
      run: |
        pip install ansible==${{ env.ANSIBLE_VERSION }}
        ansible --version
        
    - name: Validate Ansible Playbook
      run: |
        cd ansible
        echo "🔍 Validation du playbook Ansible..."
        
        # Vérifier la syntaxe du playbook
        if [ -f "deploy.yml" ]; then
          ansible-playbook --syntax-check deploy.yml
          echo "✅ Syntaxe du playbook valide"
        else
          echo "❌ Fichier deploy.yml non trouvé"
          exit 1
        fi
        
        # Vérifier que l'inventory est bien formé
        if [ -f "inventory.ini" ]; then
          echo "📋 Contenu de l'inventory généré:"
          cat inventory.ini
          echo "✅ Inventory généré avec succès"
        else
          echo "❌ Fichier inventory.ini non trouvé"
          exit 1
        fi
        
    - name: Ansible validation complete
      run: |
        echo "✅ Validation Ansible terminée"
        echo "📝 Playbook prêt pour le déploiement manuel"
        echo "💡 Pour déployer manuellement:"
        echo "   1. Créez l'infrastructure avec: terraform apply"
        echo "   2. Mettez à jour inventory.ini avec les vraies IPs"
        echo "   3. Lancez: ansible-playbook -i inventory.ini deploy.yml"

  notify-success:
    needs: [ansible-validate]
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Success notification
      run: |
        echo "🎉 VALIDATION CI/CD RÉUSSIE !"
        echo "================================="
        echo "✅ Tests passés (Backend/Frontend/Terraform)"
        echo "✅ Images Docker construites et poussées"
        echo "✅ Infrastructure Terraform validée"
        echo "✅ Playbook Ansible validé"
        echo ""
        echo "📦 Images disponibles :"
        echo "   - ${{ env.IMAGE_NAME_BACKEND }}:latest"
        echo "   - ${{ env.IMAGE_NAME_FRONTEND }}:latest"
        echo ""
        echo "🚀 DÉPLOIEMENT MANUEL REQUIS :"
        echo "================================="
        echo "1. Créer l'infrastructure :"
        echo "   cd infrastructure && terraform apply"
        echo ""
        echo "2. Récupérer les IPs :"
        echo "   terraform output"
        echo ""
        echo "3. Mettre à jour inventory.ini avec les vraies IPs"
        echo ""
        echo "4. Déployer avec Ansible :"
        echo "   cd ansible && ansible-playbook -i inventory.ini deploy.yml"

  cleanup-on-failure:
    needs: [terraform-validate, ansible-validate]
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Failure notification
      run: |
        echo "❌ ÉCHEC DE LA VALIDATION CI/CD"
        echo "======================"
        echo "La validation a échoué. Vérifiez les logs des étapes précédentes."
        echo "Aucune infrastructure n'a été créée - pas de nettoyage nécessaire."
