name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_ansible:
        description: 'D√©ployer avec Ansible apr√®s validation'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ghcr.io/xalsie/devops/backend
  IMAGE_NAME_FRONTEND: ghcr.io/xalsie/devops/frontend

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Test Backend
      working-directory: ./backend
      run: |
        npm ci
        npm run lint || echo "No lint script"
        npm test
        
    - name: Test Frontend
      working-directory: ./frontend
      run: |
        npm ci
        npm run lint || echo "No lint script"
        npm run build
        npm run validate
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.6.0"
        
    - name: Setup Security Tools
      run: |
        pip install checkov
        curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
        
    - name: Validate Terraform
      working-directory: ./infrastructure
      run: |
        terraform fmt -check -recursive
        terraform init -backend=false
        terraform validate
        
        # Valider aussi les modules individuellement
        for module in modules/*/; do
          if [ -d "$module" ]; then
            echo "üîç Validation du module: $module"
            cd "$module"
            terraform fmt -check -recursive
            terraform init -backend=false
            terraform validate
            cd ../..
          fi
        done
        
        # Tools de s√©curit√©
        tflint --init && tflint --format compact
        checkov -d . --framework terraform --quiet --compact

  build-and-deploy:
    needs: [validate]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate configs and extract backend IP
      run: |
        # V√©rifier outputs.json
        if [ ! -f "infrastructure/outputs.json" ]; then
          echo "outputs.json manquant - utilisation de localhost"
          echo "BACKEND_PUBLIC_IP=localhost" >> $GITHUB_ENV
          exit 0
        fi
        
        # Extraire IPs et g√©n√©rer configs
        BACKEND_IP=$(jq -r '.backend_public_ip.value' infrastructure/outputs.json)
        FRONTEND_IP=$(jq -r '.frontend_public_ip.value' infrastructure/outputs.json)
        MONGODB_IP=$(jq -r '.mongodb_public_ip.value' infrastructure/outputs.json)
        BACKEND_PRIVATE_IP=$(jq -r '.backend_private_ip.value' infrastructure/outputs.json)
        FRONTEND_PRIVATE_IP=$(jq -r '.frontend_private_ip.value' infrastructure/outputs.json)
        MONGODB_PRIVATE_IP=$(jq -r '.mongodb_private_ip.value' infrastructure/outputs.json)
        
        echo "BACKEND_PUBLIC_IP=$BACKEND_IP" >> $GITHUB_ENV
        
        # G√©n√©rer inventory Ansible
        mkdir -p ansible
        cat > ansible/inventory.ini <<EOF
        [mongodb]
        $MONGODB_IP ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/aws-devops.pem

        [backend]
        $BACKEND_IP ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/aws-devops.pem

        [frontend]
        $FRONTEND_IP ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/aws-devops.pem

        [all:vars]
        ansible_ssh_common_args='-o StrictHostKeyChecking=no'
        mongodb_private_ip=$MONGODB_PRIVATE_IP
        backend_private_ip=$BACKEND_PRIVATE_IP
        frontend_private_ip=$FRONTEND_PRIVATE_IP
        backend_public_ip=$BACKEND_IP
        frontend_public_ip=$FRONTEND_IP
        EOF

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.CR_PAT }}
        
    - name: Build and push images
      run: |
        # Extract metadata and build backend
        # tag correspond of name in branche
        docker build -t ${{ env.IMAGE_NAME_BACKEND }}:${{ github.ref_name }} \
                    -t ${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }} \
                    ./backend
        docker push ${{ env.IMAGE_NAME_BACKEND }}:${{ github.ref_name }}
        docker push ${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}

        # Build and push frontend with real backend IP
        docker build -t ${{ env.IMAGE_NAME_FRONTEND }}:${{ github.ref_name }} \
                    -t ${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }} \
                    --build-arg VITE_BACKEND_URL=http://${{ env.BACKEND_PUBLIC_IP }}:3000 \
                    ./frontend
        docker push ${{ env.IMAGE_NAME_FRONTEND }}:${{ github.ref_name }}
        docker push ${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}

    - name: Upload configs as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-configs
        path: |
          ansible/inventory.ini
          infrastructure/outputs.json

  deploy:
    needs: [build-and-deploy]
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/main' && (
        github.event_name == 'push' || 
        (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_ansible == 'true')
      )
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download deployment configs
      uses: actions/download-artifact@v4
      with:
        name: deployment-configs
        path: .
        
    - name: Setup Python and Ansible
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Ansible and setup SSH
      run: |
        pip install ansible==8.0.0
        mkdir -p ~/.ssh
        echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > ~/.ssh/aws-devops.pem
        chmod 600 ~/.ssh/aws-devops.pem
        
    - name: Validate Ansible configuration
      working-directory: ./ansible
      run: |
        # Syntax check
        ansible-playbook --syntax-check deploy.yml
        
        # Verify inventory
        if [ -f "inventory.ini" ]; then
          echo "Inventory g√©n√©r√©:"
          cat inventory.ini
        else
          echo "inventory.ini manquant"
          exit 1
        fi
        
    - name: Deploy with Ansible
      working-directory: ./ansible
      run: |
        ansible-playbook -i inventory.ini deploy.yml \
          --extra-vars "github_username=${{ github.repository_owner }}" \
          --extra-vars "github_token=${{ secrets.CR_PAT }}" \
          -v

  notify:
    needs: [build-and-deploy, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Success notification for main branch
      if: needs.build-and-deploy.result == 'success' && github.ref == 'refs/heads/main'
      run: |
        echo "CI/CD Pipeline termin√©e avec succ√®s sur MAIN!"
        echo "Validation: Backend, Frontend, Terraform"
        echo "Images Docker build√©es et pouss√©es"
        echo "Images disponibles:"
        echo "   - ${{ env.IMAGE_NAME_BACKEND }}:${{ github.ref_name }}"
        echo "   - ${{ env.IMAGE_NAME_FRONTEND }}:${{ github.ref_name }}"
        if [ "${{ needs.deploy.result }}" = "success" ]; then
          echo "D√©ploiement automatique r√©ussi!"
        else
          echo "D√©ploiement en cours ou manuel requis..."
        fi
        
    - name: Success notification for develop branch
      if: needs.build-and-deploy.result == 'success' && github.ref == 'refs/heads/develop'
      run: |
        echo "CI/CD Pipeline termin√©e avec succ√®s sur DEVELOP!"
        echo "Validation: Backend, Frontend, Terraform"
        echo "Images Docker build√©es et pouss√©es"
        echo "Images disponibles:"
        echo "   - ${{ env.IMAGE_NAME_BACKEND }}:${{ github.ref_name }}"
        echo "   - ${{ env.IMAGE_NAME_FRONTEND }}:${{ github.ref_name }}"
        echo "Pas de d√©ploiement automatique sur develop"
        echo "Pour d√©ployer: mergez sur main ou utilisez workflow_dispatch"
        
    - name: Deploy success notification
      if: needs.deploy.result == 'success'
      run: |
        echo "D√©ploiement Ansible r√©ussi!"
        echo "Application accessible sur les IPs configur√©es"
        
    - name: Failure notification
      if: needs.build-and-deploy.result == 'failure' || needs.deploy.result == 'failure'
      run: |
        echo "Pipeline √©chou√©e - v√©rifiez les logs"
