name: Test Terraform Outputs

on:
  workflow_dispatch:  # Permet de lancer manuellement

env:
  TF_VERSION: "1.6.0"

jobs:
  test-terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infrastructure
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'us-west-2' }}
        
    - name: Terraform Init
      run: terraform init -backend=false
      
    - name: Terraform Validate
      run: terraform validate
      
    - name: Terraform Plan (Dry Run)
      run: |
        echo "🧪 Test du plan Terraform..."
        terraform plan -var-file="terraform.tfvars" -no-color
        
    - name: Check outputs definition
      run: |
        echo "📋 Vérification des outputs définis:"
        if [ -f "outputs.tf" ]; then
          echo "✅ Le fichier outputs.tf existe"
          echo "Outputs définis:"
          grep -E "^output" outputs.tf || echo "Aucun output trouvé"
        else
          echo "❌ Le fichier outputs.tf n'existe pas"
          exit 1
        fi
        
    - name: Generate Terraform Report
      run: |
        echo "📊 Génération du rapport Terraform..."
        
        # Créer le répertoire de rapport
        mkdir -p ../reports
        
        # Variables
        TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        REPORT_FILE="../reports/terraform-validation-report.md"
        
        # Créer le rapport simple
        echo "# Rapport de Validation Terraform" > $REPORT_FILE
        echo "" >> $REPORT_FILE
        echo "**Date:** $TIMESTAMP" >> $REPORT_FILE
        echo "**Branche:** ${{ github.ref_name }}" >> $REPORT_FILE
        echo "**Commit:** ${{ github.sha }}" >> $REPORT_FILE
        echo "**Utilisateur:** ${{ github.actor }}" >> $REPORT_FILE
        echo "" >> $REPORT_FILE
        
        # Statut
        echo "## Statut de Validation" >> $REPORT_FILE
        echo "" >> $REPORT_FILE
        echo "- [x] Terraform Init OK" >> $REPORT_FILE
        echo "- [x] Terraform Validate OK" >> $REPORT_FILE
        echo "- [x] Terraform Plan OK" >> $REPORT_FILE
        echo "- [x] Outputs définis OK" >> $REPORT_FILE
        echo "" >> $REPORT_FILE
        
        # Outputs disponibles
        echo "## Outputs Terraform" >> $REPORT_FILE
        echo "" >> $REPORT_FILE
        
        # Vérifier si l'infrastructure existe déjà
        if terraform state list >/dev/null 2>&1 && [ $(terraform state list | wc -l) -gt 0 ]; then
          echo "### 🚀 Infrastructure déployée - Valeurs actuelles:" >> $REPORT_FILE
          echo "" >> $REPORT_FILE
          echo "| Output | Description | Valeur Actuelle |" >> $REPORT_FILE
          echo "|--------|-------------|-----------------|" >> $REPORT_FILE
          
          # Extraire chaque output avec sa description et valeur
          if [ -f "outputs.tf" ]; then
            while IFS= read -r line; do
              if [[ $line =~ ^output ]]; then
                output_name=$(echo "$line" | sed 's/output "\([^"]*\)".*/\1/')
                description=$(awk "/^output \"$output_name\"/,/^}/" outputs.tf | grep -E "description\s*=" | sed 's/.*description\s*=\s*"\([^"]*\)".*/\1/' | head -1)
                
                # Récupérer la valeur réelle
                actual_value=$(terraform output -raw "$output_name" 2>/dev/null || echo "N/A")
                
                # Formatage de la valeur (limiter la longueur pour les valeurs très longues)
                if [ ${#actual_value} -gt 50 ]; then
                  display_value="${actual_value:0:47}..."
                else
                  display_value="$actual_value"
                fi
                
                # Ajouter à la table
                if [ -n "$description" ] && [ "$description" != "" ]; then
                  echo "| \`$output_name\` | $description | \`$display_value\` |" >> $REPORT_FILE
                else
                  echo "| \`$output_name\` | - | \`$display_value\` |" >> $REPORT_FILE
                fi
              fi
            done < outputs.tf
          fi
          echo "" >> $REPORT_FILE
          
          # Afficher également la sortie brute complète
          echo "<details>" >> $REPORT_FILE
          echo "<summary>📋 Voir tous les outputs (format brut)</summary>" >> $REPORT_FILE
          echo "" >> $REPORT_FILE
          echo "\`\`\`" >> $REPORT_FILE
          terraform output >> $REPORT_FILE 2>/dev/null || echo "Erreur lors de la récupération des outputs" >> $REPORT_FILE
          echo "\`\`\`" >> $REPORT_FILE
          echo "</details>" >> $REPORT_FILE
          echo "" >> $REPORT_FILE
          
        else
          echo "### ⏳ Infrastructure non déployée - Outputs qui seront disponibles:" >> $REPORT_FILE
          echo "" >> $REPORT_FILE
          echo "| Output | Description |" >> $REPORT_FILE
          echo "|--------|-------------|" >> $REPORT_FILE
          
          # Lister les outputs définis sans valeurs
          if [ -f "outputs.tf" ]; then
            while IFS= read -r line; do
              if [[ $line =~ ^output ]]; then
                output_name=$(echo "$line" | sed 's/output "\([^"]*\)".*/\1/')
                description=$(awk "/^output \"$output_name\"/,/^}/" outputs.tf | grep -E "description\s*=" | sed 's/.*description\s*=\s*"\([^"]*\)".*/\1/' | head -1)
                
                if [ -n "$description" ] && [ "$description" != "" ]; then
                  echo "| \`$output_name\` | $description |" >> $REPORT_FILE
                else
                  echo "| \`$output_name\` | - |" >> $REPORT_FILE
                fi
              fi
            done < outputs.tf
          fi
          echo "" >> $REPORT_FILE
        fi
        
        # Instructions
        echo "## Instructions de déploiement" >> $REPORT_FILE
        echo "" >> $REPORT_FILE
        echo "1. Déployer: \`./deploy-manual.sh deploy\`" >> $REPORT_FILE
        echo "2. Vérifier: \`./deploy-manual.sh status\`" >> $REPORT_FILE
        echo "3. Détruire: \`./deploy-manual.sh destroy\`" >> $REPORT_FILE
        echo "" >> $REPORT_FILE
        echo "---" >> $REPORT_FILE
        echo "*Rapport généré automatiquement*" >> $REPORT_FILE
        
        echo "✅ Rapport généré avec succès"
        echo "📄 Aperçu du rapport:"
        cat $REPORT_FILE
        
    - name: Upload Terraform Report
      uses: actions/upload-artifact@v4
      with:
        name: terraform-validation-report
        path: reports/terraform-validation-report.md
        retention-days: 30
        
    - name: Success
      run: |
        echo "🎉 Validation Terraform terminée avec succès!"
        echo "📊 Rapport de validation généré et disponible en artifact"
        echo ""
        echo "📥 Pour télécharger le rapport:"
        echo "  1. Allez dans l'onglet 'Actions' de GitHub"
        echo "  2. Cliquez sur ce workflow" 
        echo "  3. Téléchargez l'artifact 'terraform-validation-report'"
        echo ""
        echo "🚀 Prêt pour le déploiement manuel avec:"
        echo "  ./deploy-manual.sh deploy"
